from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
import asyncio
from aiogram.utils import executor

from aiogram_calendar import simple_cal_callback, SimpleCalendar, dialog_cal_callback, DialogCalendar

from keyboards import *
from config import *
from admin_kb import *
from models import *


@dp.message_handler(commands="start")
async def start(message: types.Message):
    """–°—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é"""
    main_menu = create_main_menu()
    await message.answer(
        text="–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã –ê–≤—Ä–æ—Ä–∞!\n"
             "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –æ–±—Ä–∞—â–µ–Ω–∏—è:", reply_markup=main_menu)


@dp.callback_query_handler(lambda call: "main_menu" in call.data)
async def main_menu_cb(call: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    main_menu = create_main_menu()
    await call.message.edit_text(
        text="–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã –ê–≤—Ä–æ—Ä–∞!\n"
             "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –æ–±—Ä–∞—â–µ–Ω–∏—è:"
    )
    await call.message.edit_reply_markup(reply_markup=main_menu)
    await call.answer()


@dp.callback_query_handler(lambda call: "main_info" in call.data)
async def main_menu_cb(call: types.CallbackQuery):
    """ –ò–Ω—Ñ–æ –æ —Å–∞–ª–æ–Ω–µ """
    main_menu = create_back_to_main()
    await call.message.edit_text(
        text="–û –Ω–∞—Å: –°–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã ¬´AvRorrra¬ª–ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å–ø–µ–∫—Ç—Ä —É—Å–ª—É–≥ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã –∏ –∑–¥–æ—Ä–æ–≤—å—è, "
             "–¥–∞—Ä–∏—Ç —Ä–∞–¥–æ—Å—Ç—å –∏ —Ö–æ—Ä–æ—à–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ)üå∫‚ú®\n–ù–∞—à –∞–¥—Ä–µ—Å: "
             "–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –°—Ç—Ä–æ–º—ã–Ω–∫–∞, 22. –¢–µ–ª–µ—Ñ–æ–Ω —Å–∞–ª–æ–Ω–∞ –∫—Ä–∞—Å–æ—Ç—ã +7(918)461-83-19"
    )
    await call.message.edit_reply_markup(reply_markup=main_menu)
    await call.answer()


@dp.callback_query_handler(lambda call: "AllMyReg" in call.data)
async def main_menu_cb(call: types.CallbackQuery):
    """ –ú–µ–Ω—é –º–æ–∏ –∑–∞–ø–∏—Å–∏ """
    id_telegram = call.from_user.id
    main_menu = create_menu_all_reg(id_telegram)
    await call.message.edit_text(
        text="–í–æ—Ç –≤—Å–µ —Ç–≤–æ–∏ –∑–∞–ø–∏—Å–∏:"
    )
    await call.message.edit_reply_markup(reply_markup=main_menu)
    await call.answer()


@dp.callback_query_handler(lambda call: "MyReg" in call.data)
async def main_menu_cb(call: types.CallbackQuery):
    """ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å –∫–ª–∏–µ–Ω—Ç–∞ """
    id_reg = call.data.split("_")[1]
    main_menu = create_back_to_main()
    date, master, service, price = create_menu_my_theat(id_reg)
    await call.message.edit_text(
        text=f"–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –∫ –º–∞—Å—Ç–µ—Ä—É {master}\n"
             f"–î–∞—Ç–∞: {date}\n"
             f"–£—Å–ª—É–≥–∞: {service}\n"
             f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {price}"
    )
    await call.message.edit_reply_markup(reply_markup=main_menu)
    await call.answer()


@dp.callback_query_handler(Text(startswith="categories"))
async def caterories_cb(call: types.CallbackQuery, state: FSMContext):
    """ –º–µ–Ω—é –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π """
    menu = create_menu_caterory()
    await call.message.edit_text(text="–í—ã–±–µ—Ä–µ—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:")
    await call.message.edit_reply_markup(reply_markup=menu)
    await state.update_data(telegram_id=call.from_user.id)
    await call.answer()


@dp.callback_query_handler(Text(startswith="category"))
async def services_cb(call: types.CallbackQuery, state: FSMContext):
    """ –º–µ–Ω—é –≤—Å–µ—Ö —É—Å–ª—É–≥ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ """
    id_cat = call.data.split("_")[1]
    menu, cat_name = create_menu_service(id_cat)
    await call.message.edit_text(text="–í—ã–±–µ—Ä–µ—Ç–µ —É—Å–ª—É–≥—É:")
    await call.message.edit_reply_markup(reply_markup=menu)
    await state.update_data(category=cat_name)
    await call.answer()


@dp.callback_query_handler(Text(startswith="service"))
async def services_cb(call: types.CallbackQuery, state: FSMContext):
    """ –º–µ–Ω—é –≤—Å–µ—Ö –º–∞—Å—Ç–µ—Ä–æ–≤ —Å —ç—Ç–æ–π —É—Å–ª—É–≥–æ–π """
    id_service = call.data.split("_")[1]
    menu, name_service = create_menu_masters(id_service)
    await call.message.edit_text(text="–í—ã–±–µ—Ä–µ—Ç–µ –º–∞—Å—Ç–µ—Ä–∞:")
    await call.message.edit_reply_markup(reply_markup=menu)
    await state.update_data(service=name_service)
    await state.update_data(id_service=id_service)
    await call.answer()


@dp.callback_query_handler(Text(startswith="master"))
async def nav_cal_handler(call: types.CallbackQuery, state: FSMContext):
    """ –∫–∞–ª–µ–Ω–¥–∞—Ä—å """
    id_master = call.data.split("_")[1]
    name_master = sql_get_name_master(id_master)
    await state.update_data(master=name_master[0])
    await state.update_data(id_master=id_master)
    await call.message.edit_text(text="–í—ã–±–µ—Ä–µ—Ç–µ –¥–∞—Ç—É:")
    await call.message.edit_reply_markup(reply_markup=await SimpleCalendar().start_calendar())


@dp.callback_query_handler(simple_cal_callback.filter())
async def process_simple_calendar(callback_query: types.CallbackQuery, callback_data: dict, state: FSMContext):
    """ –æ—Ç–ª–æ–≤ —Å–æ–±—ã—Ç–∏–π –Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ """
    selected, date = await SimpleCalendar().process_selection(callback_query, callback_data)
    await state.update_data(date=date)
    if selected:
        await callback_query.message.answer(text="–í–≤–µ–¥–∏—Ç–µ –í–∞—à–∏ –§–ò–û")  # , reply_markup=create_main_menu()
        await NewSales.client_name.set()


@dp.message_handler(state=NewSales.client_name)
async def enter_phones(message: types.Message, state: FSMContext):
    """ –æ—Ç–ª–æ–≤ —Å–æ–±—ã—Ç–∏—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏, —Ñ—Å–º –≤ —Å—Ç–µ–π—Ç phone """
    # await state.update_data(id=message.from_user.id)
    await state.update_data(client_name=message.text)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')
    await NewSales.phone.set()


@dp.message_handler(state=NewSales.phone)
async def enter_phones(message: types.Message, state: FSMContext):
    """ –æ—Ç–ª–æ–≤ —Å–æ–±—ã—Ç–∏—è –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –±–¥ """
    # await state.update_data(id=message.from_user.id)
    await state.update_data(phone=message.text)
    data = await state.get_data()
    await state.finish()
    tele_id = data["telegram_id"]
    category = data["category"]
    service = data["service"]
    id_service = data["id_service"]
    date = data["date"].strftime("%d.%m.%Y")
    master = data["master"]
    id_master = data["id_master"]
    client_name = data["client_name"]
    phone = data['phone']
    price = sql_get_price(id_service)[0]
    check_tele = sql_check_telegram(tele_id)
    menu = create_back_to_main()
    if check_tele == []:
        sql_add_client(tele_id, client_name, phone)
        id_client = sql_check_telegram(tele_id)[0][0]
    else:
        id_client = check_tele[0][0]
    sql_add_sale(id_master, id_client, id_service, date)
    await message.answer(text=f"–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –∫ –º–∞—Å—Ç–µ—Ä—É: {master}\n"
                              f"–ù–∞ —É—Å–ª—É–≥—É: {service}\n"
                              f"–î–∞—Ç–∞: {date}\n"
                              f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {price}", reply_markup=menu)
    for operator in operators:
        urll = f"tg://user?id='{tele_id}'"
        cb = types.InlineKeyboardMarkup(row_width=1)
        cb.add(InlineKeyboardButton(text='–ù–∞–ø–∏—Å–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—É', url=urll))
        await bot.send_message(operator, f"–ó–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {client_name}\n"
                                         f"–î–∞—Ç–∞: {date}\n"
                                         f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
                                         f"–ö –∫–æ–º—É: {master}\n"
                                         f"–£—Å–ª—É–≥–∞: {service}\n"
                                         f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {price}", reply_markup=cb)



""" ---------------- admin -----------------"""


@dp.message_handler(commands="admin")
async def admin(message: types.Message):
    """ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞"""
    print(message.from_user.id)
    print(admins)
    if message.from_user.id in admins:
        main_menu = create_menu_admin()
        await message.answer(
            text="–°–∞–ª—é—Ç, –∞–¥–º–∏–Ω!\n"
                 "–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å\–∏—Å–ø—Ä–∞–≤–∏—Ç—å\–¥–æ–±–∞–≤–∏—Ç—å:", reply_markup=main_menu)
    else:
        await message.answer(
            text="–¢–µ–±—è –Ω–µ—Ç –≤ –∞–¥–º–∏–Ω–∫–µ, –ø–∏—à–∏ –∞–¥–º–∏–Ω—É!", reply_markup=create_back_to_main())


@dp.callback_query_handler(lambda call: "ADMINmain" in call.data)
async def admin(call: types.CallbackQuery):
    """ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞"""
    main_menu = create_menu_admin()
    await call.message.edit_text(text="–°–∞–ª—é—Ç, –∞–¥–º–∏–Ω!\n"
                                      "–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å\–∏—Å–ø—Ä–∞–≤–∏—Ç—å\–¥–æ–±–∞–≤–∏—Ç—å:")
    await call.message.edit_reply_markup(reply_markup=main_menu)


@dp.callback_query_handler(lambda call: "AdminAdd" in call.data)
async def admin_add(call: types.CallbackQuery):
    """ –º–µ–Ω—é –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞ """
    menu = create_menu_add_admin()
    await call.message.edit_text(text="–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å")
    await call.message.edit_reply_markup(reply_markup=menu)
    await call.answer()


@dp.callback_query_handler(lambda call: "AddMaster" in call.data)
async def admin_add_master(call: types.CallbackQuery, state: FSMContext):
    """ –æ—Ç–ª–æ–≤ —Å–æ–±—ã—Ç–∏—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –º–∞—Å—Ç–µ—Ä–∞ """
    await call.message.edit_text(text="–í–≤–µ–¥–∏ –∏–º—è –º–∞—Å—Ç–µ—Ä–∞")
    await state.set_state(AddMaster.name)
    await AddMaster.name.set()
    await call.answer()


@dp.message_handler(state=AddMaster.name)
async def enter_phones(message: types.Message, state: FSMContext):
    """ –æ—Ç–ª–æ–≤ —Å–æ–±—ã—Ç–∏—è –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞ """
    # await state.update_data(id=message.from_user.id)
    await state.update_data(name=message.text)
    await message.answer('–í–≤–µ–¥–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞')
    await AddMaster.description.set()


@dp.message_handler(state=AddMaster.description)
async def enter_phones(message: types.Message, state: FSMContext):
    """ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞ –≤ –±–¥ """
    await state.update_data(description=message.text)
    data = await state.get_data()
    await state.finish()
    sql_add_master(data['name'], data['description'])
    menu = create_menu_return_main_admin()
    await message.answer('–º–∞—Å—Ç–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω', reply_markup=menu)


@dp.callback_query_handler(lambda call: "AddCategory" in call.data)
async def admin_add_category(call: types.CallbackQuery, state: FSMContext):
    """ –¥–æ–±–∞–≤–∏—Ç—å–± –∫–∞—Ç–µ–≥–æ—Ä–∏—é """
    await call.message.edit_text(text="–í–≤–µ–¥–∏ –∏–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    await state.set_state(AddCategory.name)
    await AddCategory.name.set()
    await call.answer()


@dp.message_handler(state=AddCategory.name)
async def admin_enter_cat_name(message: types.Message, state: FSMContext):
    """ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –±–¥ """
    await state.update_data(name=message.text)
    menu = create_menu_return_main_admin()
    data = await state.get_data()
    await state.finish()
    sql_add_category(data['name'])
    await message.answer('–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞', reply_markup=menu)


@dp.callback_query_handler(lambda call: "AddService" in call.data)
async def admin_add_service(call: types.CallbackQuery, state: FSMContext):
    """ –¥–æ–±–∞–≤–∏—Ç—å–± —Å–µ—Ä–≤–∏—Å """
    await call.message.edit_text(text="–í–≤–µ–¥–∏ –∏–º—è —É—Å–ª—É–≥–∏")
    await state.set_state(AddService.name)
    await AddService.name.set()
    await call.answer()


@dp.message_handler(state=AddService.name)
async def add_service_name(message: types.Message, state: FSMContext):
    """ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–º—è –∏ –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥–∏ """
    await state.update_data(name=message.text)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å:')
    await AddService.price.set()


@dp.message_handler(state=AddService.price)
async def add_service_price(message: types.Message, state: FSMContext):
    """ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ–±–∞–≤–∏—Ç—å –≤—Ä–µ–º—è —É—Å–ª—É–≥–∏ """
    await state.update_data(price=message.text)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ–∫–∞–∑–∞–Ω–∏—è —É—Å–ª—É–≥–∏')
    await AddService.time.set()


@dp.message_handler(state=AddService.time)
async def admin_enter_cat_name(message: types.Message, state: FSMContext):
    """ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –±–¥ """
    await state.update_data(time=message.text)
    menu = create_menu_return_main_admin()
    data = await state.get_data()
    await state.finish()
    sql_add_service(data['name'], data['price'], data['time'])
    await message.answer('–£—Å–ª—É–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞', reply_markup=menu)


@dp.callback_query_handler(lambda call: "AddRelation" in call.data)
async def admin_add_relation(call: types.CallbackQuery):
    """ –º–µ–Ω—é –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–≤—è–∑–µ–π –¥–ª—è –∞–¥–º–∏–Ω–∞ """
    menu = create_menu_relation_admin()
    await call.message.edit_text(text="–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–≤—è–∑–∞—Ç—å")
    await call.message.edit_reply_markup(reply_markup=menu)
    await call.answer()


@dp.callback_query_handler(lambda call: "addService_relation" in call.data)
async def admin_add_relation_all_cat(call: types.CallbackQuery):
    """ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —É—Å–¥—É–≥–∏ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Å–≤—è–∑–∏ """
    menu = create_menu_relation_old_category()
    await call.message.edit_text(text="–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
    await call.message.edit_reply_markup(reply_markup=menu)
    await call.answer()


# @dp.callback_query_handler(lambda call: "AllCategoryForRelation")
@dp.callback_query_handler(lambda call: "AllCategoryForRelation" in call.data)
async def admin_add_relation_all_service_cat(call: types.CallbackQuery):
    """ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —É—Å–¥—É–≥ —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π """
    id_category = call.data.split("_")[1]
    menu, check = create_menu_relation_old_category_service(id_category)
    print(menu)
    if check == False:
        await call.message.edit_text(text="–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –µ—â–µ –Ω–µ—Ç —É—Å–ª—É–≥")
        await call.message.edit_reply_markup(reply_markup=menu)
    else:
        await call.message.edit_text(text="–í—ã–±–µ—Ä–∏ —É—Å–ª—É–≥—É")
        await call.message.edit_reply_markup(reply_markup=menu)
    await call.answer()


@dp.callback_query_handler(lambda call: "AllServicesInCategoryRelation" in call.data)
async def admin_add_relation_all_new_cat(call: types.CallbackQuery, state: FSMContext):
    """ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —É—Å–ª—É–≥–∏ """
    service_id = call.data.split("_")[1]
    service_name = sql_get_name_service(service_id)
    menu = create_menu_relation_all_category()
    await state.update_data(service_name=service_name)
    await state.update_data(service_id=service_id)
    await call.message.edit_text(text="–í—ã–±–µ—Ä–∏ —É—Å–ª—É–≥—É")
    await call.message.edit_reply_markup(reply_markup=menu)
    await call.answer()


@dp.callback_query_handler(lambda call: "RelationServiceDone" in call.data)
async def admin_add_relation_service_done(call: types.CallbackQuery, state: FSMContext):
    """ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–≤—è–∑–∏ –≤ –±–¥ """
    data = await state.get_data()
    category_id = call.data.split("_")[1]
    category_name = sql_get_name_cat(category_id)
    service_id = data["service_id"]
    menu = create_menu_return_main_admin()
    await state.update_data(category_id=category_id)
    await state.update_data(category_name=category_name)
    await state.finish()
    sql_add_relation_services(category_id, service_id)
    await call.message.edit_text(text=f"–í—ã –¥–æ–±–∞–≤–∏–ª–∏ {data['service_name']} –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {data['category_name']}")
    await call.message.edit_reply_markup(reply_markup=menu)
    await call.answer()


@dp.callback_query_handler(lambda call: "CreateNewRelationService" in call.data)
async def admin_add_relation_all_new_cat(call: types.CallbackQuery):
    """ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏ –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π """
    menu = create_menu_alone_services()
    await call.message.edit_text(text="–í—ã–±–µ—Ä–∏ —É—Å–ª—É–≥—É")
    await call.message.edit_reply_markup(reply_markup=menu)
    await call.answer()


@dp.callback_query_handler(lambda call: "AllAloneServices" in call.data)
async def admin_add_relation_alone_service(call: types.CallbackQuery):
    """ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —É—Å–ª—É–≥–∏ """
    service_id = call.data.split("_")[1]
    menu = create_menu_alone_categories(service_id)
    await call.message.edit_text(text="–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
    await call.message.edit_reply_markup(reply_markup=menu)
    await call.answer()


@dp.callback_query_handler(lambda call: "AllAloneCategories" in call.data)
async def admin_add_relation_alone_category(call: types.CallbackQuery):
    """ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —É—Å–ª—É–≥–∏ """
    category_id = call.data.split("_")[1]
    service_id = call.data.split("_")[2]
    sql_add_relation_services(category_id, service_id)
    service_name = sql_get_name_service(service_id)
    category_name = sql_get_name_cat(category_id)
    menu = create_menu_return_main_admin()
    await call.message.edit_text(text=f"–£—Å–ª—É–≥–∞ {service_name} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é {category_name}")
    await call.message.edit_reply_markup(reply_markup=menu)
    await call.answer()


@dp.callback_query_handler(lambda call: "addMaster_relation" in call.data)
async def create_menu_rel_master(call: types.CallbackQuery):
    """ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –º–∞—Å—Ç–µ—Ä–∞ –¥–ª—è —Å–≤—è–∑–∏ —Å —É—Å–ª—É–≥–æ–π """
    menu = create_menu_all_masters()
    await call.message.edit_text(text=f"–í—ã–±–µ—Ä–∏ –º–∞—Å—Ç–µ—Ä–∞")
    await call.message.edit_reply_markup(reply_markup=menu)
    await call.answer()


@dp.callback_query_handler(lambda call: "RelationMaster" in call.data)
async def create_menu_all_cat_masters(call: types.CallbackQuery, state: FSMContext):
    """ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞ """
    master_id = call.data.split("_")[1]
    menu = create_menu_all_cat_for_master()
    await state.update_data(master_id=master_id)
    await call.message.edit_text(text=f"–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
    await call.message.edit_reply_markup(reply_markup=menu)
    await call.answer()


@dp.callback_query_handler(lambda call: "RelationCatMaster" in call.data)
async def create_menu_all_service_masters(call: types.CallbackQuery, state: FSMContext):
    """ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞ """
    category_id = call.data.split("_")[1]
    menu = create_menu_all_master_service(category_id)
    # await state.update_data(master_id=master_id)
    await call.message.edit_text(text=f"–í—ã–±–µ—Ä–∏ —É—Å–ª—É–≥—É")
    await call.message.edit_reply_markup(reply_markup=menu)
    await call.answer()


@dp.callback_query_handler(lambda call: "RelationServiceMaster" in call.data)
async def create_menu_skills_bd(call: types.CallbackQuery, state: FSMContext):
    """ –∑–∞–ø–∏—Å—å —Å–∫–∏–ª–æ–≤ –≤ –±–¥ """
    data = await state.get_data()
    await state.finish()
    service_id = call.data.split("_")[1]
    service_name = sql_get_name_service(service_id)
    master_id = data['master_id']
    master_name = sql_get_name_master(master_id)[0]
    menu = create_menu_return_main_admin()
    sql_add_relation_master(master_id, service_id)
    await call.message.edit_text(text=f"–í—ã –¥–æ–±–∞–≤–∏–ª–∏ –º–∞—Å—Ç–µ—Ä—É: {master_name}\n"
                                      f"—É—Å–ª—É–≥—É: {service_name}")
    await call.message.edit_reply_markup(reply_markup=menu)
    await call.answer()


@dp.callback_query_handler(lambda call: "AdminSelect" in call.data)
async def create_menu_select(call: types.CallbackQuery):
    """ –ü–æ–∫–∞–∑ —Ç–æ–≥–æ, —á—Ç–æ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å """
    menu = create_menu_select_admin()
    await call.message.edit_text(text="–ß—Ç–æ —Ö–æ—á–µ—à—å –≥–ª—è–Ω—É—Ç—å?")
    await call.message.edit_reply_markup(reply_markup=menu)
    await call.answer()


@dp.callback_query_handler(lambda call: "AdminDelete" in call.data)
async def create_menu_main_delete(call: types.CallbackQuery):
    """ –ü–æ–∫–∞–∑ —Ç–æ–≥–æ, —á—Ç–æ –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å """
    menu = create_menu_delete_admin()
    await call.message.edit_text(text="–ß—Ç–æ —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å?")
    await call.message.edit_reply_markup(reply_markup=menu)
    await call.answer()


@dp.callback_query_handler(lambda call: "AdminMasterDelete" in call.data)
async def create_menu_delte_master(call: types.CallbackQuery):
    """ –ü–æ–∫–∞–∑ –≤—Å–µ—Ö –º–∞—Å—Ç–µ—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è """
    menu = create_menu_main_master_delete_admin()
    await call.message.edit_text(text="–ö–∞–∫–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞ —É–¥–∞–ª–∏—Ç—å?")
    await call.message.edit_reply_markup(reply_markup=menu)
    await call.answer()


@dp.callback_query_handler(lambda call: "DeleteMaster" in call.data)
async def create_menu_delte_master(call: types.CallbackQuery):
    """ –ü–æ–∫–∞–∑ –∏–Ω—Ñ—ã –æ –º–∞—Å—Ç–µ—Ä–µ –∏ –≤—ã–±–æ—Ä —á—Ç–æ –¥–µ–ª–∞—Ç—å """
    master_id = call.data.split("_")[1]
    menu, master_name, master_description = create_menu_master_delete_admin(master_id)
    await call.message.edit_text(text=f"–ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å —Å –º–∞—Å—Ç–µ—Ä–æ–º {master_name}?\n"
                                      f"{master_description}")
    await call.message.edit_reply_markup(reply_markup=menu)
    await call.answer()


@dp.callback_query_handler(lambda call: "DeleteBDMaster" in call.data)
async def create_menu_delete_master_done(call: types.CallbackQuery):
    """ –£–¥–∞–ª–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞ –∏–∑ –±–¥ """
    master_id = call.data.split("_")[1]
    master_name = sql_get_name_master(master_id)[0]
    sql_delete_master(master_id)
    menu = create_menu_return_main_admin()
    await call.message.edit_text(text=f"–ú–∞—Å—Ç–µ—Ä {master_name} —É–¥–∞–ª–µ–Ω!")
    await call.message.edit_reply_markup(reply_markup=menu)
    await call.answer()


@dp.callback_query_handler(lambda call: "EditBDMaster" in call.data)
async def create_menu_delte_master_done(call: types.CallbackQuery, state: FSMContext):
    """ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞ –≤ –±–¥ """
    master_id = call.data.split("_")[1]
    master_name = sql_get_name_master(master_id)[0]
    await state.update_data(master_id=master_id)
    await call.message.edit_text(text=f"–í—ã–±–µ—Ä–µ—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –º–∞—Å—Ç–µ—Ä–∞!\n"
                                      f"–ü—Ä–æ—à–ª–æ–µ –∏–º—è: {master_name}")
    # await call.message.edit_reply_markup(reply_markup=menu)
    await RenameMaster.master_name.set()
    await call.answer()


@dp.message_handler(state=RenameMaster.master_name)
async def enter_phones(message: types.Message, state: FSMContext):
    """ –ó–∞–ø–∏—Å—å –∏–º–µ–Ω–∏ –∏ –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è """
    data = await state.get_data()
    master_id = data["master_id"]
    master_description = sql_get_info_master(master_id)[1]
    await state.update_data(master_name=message.text)
    await message.answer(f'–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞!\n'
                         f'–°—Ç–∞—Ä–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {master_description}')
    await RenameMaster.master_description.set()


@dp.message_handler(state=RenameMaster.master_description)
async def enter_descript_master(message: types.Message, state: FSMContext):
    """ –ó–∞–ø–∏—Å—å –æ–ø–∏—Å–∞–Ω–∏—è –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤ –±–¥ """
    # await RenameMaster.master_description(message.text)
    await state.update_data(master_description=message.text)
    data = await state.get_data()
    await state.finish()
    master_id = data['master_id']
    master_name = data['master_name']
    master_description = data['master_description']
    old_data = sql_get_info_master(master_id)
    old_master_name = old_data[0]
    old_master_description = old_data[1]
    sql_edit_master(master_id, master_name, master_description)
    menu = create_menu_return_main_admin()
    await message.answer(text=f'–ò–∑–º–µ–Ω–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞:\n'
                              f'–ò–º—è: {old_master_name} => {master_name}\n'
                              f'–û–ø–∏—Å–∞–Ω–∏–µ: {old_master_description} = >{master_description}\n',
                         reply_markup=menu)


@dp.callback_query_handler(lambda call: "DeleteServiceAdmin" in call.data)
async def create_main_menu_delete_service(call: types.CallbackQuery):
    """ –ü–æ–∫–∞–∑ –≤—Å–µ—Ö —É—Å–ª—É–≥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è """
    menu = create_main_menu_service_delete_admin()
    await call.message.edit_text(text="–ö–∞–∫—É—é —É—Å–ª—É–≥—É —É–¥–∞–ª–∏—Ç—å?")
    await call.message.edit_reply_markup(reply_markup=menu)
    await call.answer()


@dp.callback_query_handler(lambda call: "DeleteService" in call.data)
async def create_menu_delete_service(call: types.CallbackQuery):
    """ –ü–æ–∫–∞–∑ –≤—Å–µ–π –∏–Ω—Ñ—ã –æ–± —É—Å–ª—É–≥–µ """
    service_id = call.data.split("_")[1]
    menu, service_name, service_price, service_time = create_menu_service_delete_admin(service_id)
    await call.message.edit_text(text=f"–£—Å–ª—É–≥–∞: {service_name}\n"
                                      f"–¶–µ–Ω–∞: {service_price}\n"
                                      f"–í—Ä–µ–º—è: {service_time}")
    await call.message.edit_reply_markup(reply_markup=menu)
    await call.answer()


@dp.callback_query_handler(lambda call: "DeleteBDService" in call.data)
async def create_menu_delete_service_done(call: types.CallbackQuery):
    """ –£–¥–∞–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∏ –∏–∑ –±–¥ """
    service_id = call.data.split("_")[1]
    service_name = sql_get_name_service(service_id)
    sql_delete_service(service_id)
    menu = create_menu_return_main_admin()
    await call.message.edit_text(text=f"–£—Å–ª—É–≥–∞ {service_name} —É–¥–∞–ª–µ–Ω–∞!")
    await call.message.edit_reply_markup(reply_markup=menu)
    await call.answer()


@dp.callback_query_handler(lambda call: "EditBDService" in call.data)
async def create_menu_delte_master_done(call: types.CallbackQuery, state: FSMContext):
    """ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏ –≤ –±–¥ """
    service_id = call.data.split("_")[1]
    old_service_name = sql_get_name_service(service_id)[0]
    await state.update_data(service_id=service_id)
    await call.message.edit_text(text=f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –¥–ª—è {old_service_name}!")
    # await call.message.edit_reply_markup(reply_markup=menu)
    await RenameService.service_name.set()
    await call.answer()


@dp.message_handler(state=RenameService.service_name)
async def enter_phones(message: types.Message, state: FSMContext):
    """ –ó–∞–ø–∏—Å—å –∏–º–µ–Ω–∏ –∏ –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è """
    data = await state.get_data()
    service_id = data["service_id"]
    old_service_price = sql_get_price(service_id)
    await state.update_data(service_name=message.text)
    await message.answer(f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –¥–ª—è —É—Å–ª—É–≥–∏ {data["service_name"]}!\n'
                         f'–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞: {old_service_price}')
    await RenameService.service_time.set()


@dp.message_handler(state=RenameService.service_time)
async def enter_descript_master(message: types.Message, state: FSMContext):
    """ –ó–∞–ø–∏—Å—å –≤—Ä–µ–º–µ–Ω–∏ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤ –±–¥ """
    await state.update_data(service_time=message.text)
    data = await state.get_data()
    await state.finish()
    service_id = data['service_id']
    service_name = data['service_name']
    service_price = data['service_price']
    service_time = data['service_time']
    old_data = sql_get_all_info_service(service_id)
    old_service_name = old_data[0]
    old_service_price = old_data[1]
    old_service_time = old_data[2]
    sql_edit_service(service_id, service_name, service_price, service_time)
    menu = create_menu_return_main_admin()
    await message.answer(text=f'–ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ª—É–≥–∏:\n'
                              f'–ò–º—è: {old_service_name} => {service_name}\n'
                              f'–¶–µ–Ω–∞: {old_service_price} => {service_price}\n'
                              f'–í—Ä–µ–º—è: {old_service_time} => {service_time}',
                         reply_markup=menu)



@dp.callback_query_handler(lambda call: "DeleteCategoryAdmin" in call.data)
async def create_menu_delete_service(call: types.CallbackQuery):
    """ –ü–æ–∫–∞–∑ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è """
    menu = create_main_menu_category_delete_admin()
    await call.message.edit_text(text="–ö–∞–∫—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —É–¥–∞–ª–∏—Ç—å?")
    await call.message.edit_reply_markup(reply_markup=menu)
    await call.answer()


@dp.callback_query_handler(lambda call: "DeleteService" in call.data)
async def create_menu_delete_service(call: types.CallbackQuery):
    """ –ü–æ–∫–∞–∑ –≤—Å–µ–π –∏–Ω—Ñ—ã –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ """
    category_id = call.data.split("_")[1]
    category_name = sql_get_name_cat(category_id)
    menu = create_menu_caterory_delete_admin(category_id)
    # menu, service_name, service_price, service_time = create_menu_service_delete_admin(service_id)
    await call.message.edit_text(text=f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}\n")
    await call.message.edit_reply_markup(reply_markup=menu)
    await call.answer()


@dp.callback_query_handler(lambda call: "DeleteCategory" in call.data)
async def create_menu_delete_service_done(call: types.CallbackQuery):
    """ –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –±–¥ """
    category_id = call.data.split("_")[1]
    category_name = sql_get_name_cat(category_id)
    sql_delete_category(category_id)
    menu = create_menu_return_main_admin()
    await call.message.edit_text(text=f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è {category_name} —É–¥–∞–ª–µ–Ω–∞!")
    await call.message.edit_reply_markup(reply_markup=menu)
    await call.answer()


if __name__ == '__main__':
    check_sql()
    executor.start_polling(dp, skip_updates=True)

# if __name__ == "__main__":
#     asyncio.run(main())
